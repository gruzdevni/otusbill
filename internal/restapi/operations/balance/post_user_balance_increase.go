// Code generated by go-swagger; DO NOT EDIT.

package balance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostUserBalanceIncreaseHandlerFunc turns a function with the right signature into a post user balance increase handler
type PostUserBalanceIncreaseHandlerFunc func(PostUserBalanceIncreaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserBalanceIncreaseHandlerFunc) Handle(params PostUserBalanceIncreaseParams) middleware.Responder {
	return fn(params)
}

// PostUserBalanceIncreaseHandler interface for that can handle valid post user balance increase params
type PostUserBalanceIncreaseHandler interface {
	Handle(PostUserBalanceIncreaseParams) middleware.Responder
}

// NewPostUserBalanceIncrease creates a new http.Handler for the post user balance increase operation
func NewPostUserBalanceIncrease(ctx *middleware.Context, handler PostUserBalanceIncreaseHandler) *PostUserBalanceIncrease {
	return &PostUserBalanceIncrease{Context: ctx, Handler: handler}
}

/*
	PostUserBalanceIncrease swagger:route POST /user-balance/increase Balance postUserBalanceIncrease

Пополнение баланса пользователя
*/
type PostUserBalanceIncrease struct {
	Context *middleware.Context
	Handler PostUserBalanceIncreaseHandler
}

func (o *PostUserBalanceIncrease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostUserBalanceIncreaseParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
