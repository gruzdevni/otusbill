// Code generated by go-swagger; DO NOT EDIT.

package balance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"otusbill/internal/models"
)

// GetUserBalanceGUIDOKCode is the HTTP code returned for type GetUserBalanceGUIDOK
const GetUserBalanceGUIDOKCode int = 200

/*
GetUserBalanceGUIDOK Успешное получение данных по балансу

swagger:response getUserBalanceGuidOK
*/
type GetUserBalanceGUIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserBalance `json:"body,omitempty"`
}

// NewGetUserBalanceGUIDOK creates GetUserBalanceGUIDOK with default headers values
func NewGetUserBalanceGUIDOK() *GetUserBalanceGUIDOK {

	return &GetUserBalanceGUIDOK{}
}

// WithPayload adds the payload to the get user balance Guid o k response
func (o *GetUserBalanceGUIDOK) WithPayload(payload *models.UserBalance) *GetUserBalanceGUIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user balance Guid o k response
func (o *GetUserBalanceGUIDOK) SetPayload(payload *models.UserBalance) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserBalanceGUIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserBalanceGUIDBadRequestCode is the HTTP code returned for type GetUserBalanceGUIDBadRequest
const GetUserBalanceGUIDBadRequestCode int = 400

/*
GetUserBalanceGUIDBadRequest Клиентская ошибка

swagger:response getUserBalanceGuidBadRequest
*/
type GetUserBalanceGUIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserBalanceGUIDBadRequest creates GetUserBalanceGUIDBadRequest with default headers values
func NewGetUserBalanceGUIDBadRequest() *GetUserBalanceGUIDBadRequest {

	return &GetUserBalanceGUIDBadRequest{}
}

// WithPayload adds the payload to the get user balance Guid bad request response
func (o *GetUserBalanceGUIDBadRequest) WithPayload(payload *models.Error) *GetUserBalanceGUIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user balance Guid bad request response
func (o *GetUserBalanceGUIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserBalanceGUIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserBalanceGUIDInternalServerErrorCode is the HTTP code returned for type GetUserBalanceGUIDInternalServerError
const GetUserBalanceGUIDInternalServerErrorCode int = 500

/*
GetUserBalanceGUIDInternalServerError Серверная ошибка

swagger:response getUserBalanceGuidInternalServerError
*/
type GetUserBalanceGUIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserBalanceGUIDInternalServerError creates GetUserBalanceGUIDInternalServerError with default headers values
func NewGetUserBalanceGUIDInternalServerError() *GetUserBalanceGUIDInternalServerError {

	return &GetUserBalanceGUIDInternalServerError{}
}

// WithPayload adds the payload to the get user balance Guid internal server error response
func (o *GetUserBalanceGUIDInternalServerError) WithPayload(payload *models.Error) *GetUserBalanceGUIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user balance Guid internal server error response
func (o *GetUserBalanceGUIDInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserBalanceGUIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
