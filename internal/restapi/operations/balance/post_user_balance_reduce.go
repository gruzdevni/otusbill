// Code generated by go-swagger; DO NOT EDIT.

package balance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostUserBalanceReduceHandlerFunc turns a function with the right signature into a post user balance reduce handler
type PostUserBalanceReduceHandlerFunc func(PostUserBalanceReduceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserBalanceReduceHandlerFunc) Handle(params PostUserBalanceReduceParams) middleware.Responder {
	return fn(params)
}

// PostUserBalanceReduceHandler interface for that can handle valid post user balance reduce params
type PostUserBalanceReduceHandler interface {
	Handle(PostUserBalanceReduceParams) middleware.Responder
}

// NewPostUserBalanceReduce creates a new http.Handler for the post user balance reduce operation
func NewPostUserBalanceReduce(ctx *middleware.Context, handler PostUserBalanceReduceHandler) *PostUserBalanceReduce {
	return &PostUserBalanceReduce{Context: ctx, Handler: handler}
}

/*
	PostUserBalanceReduce swagger:route POST /user-balance/reduce Balance postUserBalanceReduce

Списание с баланса пользователя
*/
type PostUserBalanceReduce struct {
	Context *middleware.Context
	Handler PostUserBalanceReduceHandler
}

func (o *PostUserBalanceReduce) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostUserBalanceReduceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
